#lang racket

(provide (all-defined-out))

(define (make-connector)
  (let ((value false)
        (informant false)
        (constraints empty))
    (define (set-value new-value setter)
      (cond ((not (has-value? dispatch))
              (set! value new-value)
              (set! informant setter)
              (for-each-except setter inform-about-value constraints))
            ((not (= value new-value)
              (error 'set-value "Contradiction detected, old: ~a, new: ~a" value new-value)))
            (else 'ignored)))
    (define (forget-value retractor)
      (if (eq? retractor informant)
        (begin (set! informant false)
               (for-each-except retractor inform-about-no-value constraints))
        'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
        (set! constraints (list* new-constraint constraints)) (void))
      (if (has-value? dispatch)
        (inform-about-value new-constraint) (void))
      'done)
    (define (dispatch request)
      (case request
        ((has-value?) (if informant true false))
        ((value) value)
        ((set-value!) set-value)
        ((forget-value!) forget-value)
        ((connect) connect)
        (else (error 'connector "unknown request: ~a" request))))
    dispatch))

(define (for-each-except exception f l)
  (for-each (位 (e) (if (eq? e exception) (void) (f e))) l))

(define (has-value? connector) (connector 'has-value?))

(define (get-value connector) (connector 'value))

(define (set-value! connector value informant) ((connector 'set-value!) value informant))

(define (forget-value! connector from) ((connector 'forget-value!) from))

(define (connect connector constraint) ((connector 'connect) constraint))

(define (inform-about-value constraint) (constraint 'value-get))

(define (inform-about-no-value constraint) (constraint 'value-lost))

(define (binary-constraint processor)
  (位 (lhs rhs result)
    (define (process-new-value) (processor lhs rhs result dispatch))
    (define (forget-value)
      (forget-value! lhs dispatch)
      (forget-value! rhs dispatch)
      (forget-value! result dispatch)
      (process-new-value))
    (define (dispatch request)
      (case request
        ((value-get) (process-new-value))
        ((value-lost) (forget-value))
        (else (error 'binary-constraint "unknown request: ~a" request))))
    (connect lhs dispatch)
    (connect rhs dispatch)
    (connect result dispatch)
    dispatch))

(define adder
  (binary-constraint
    (位 (lhs rhs sum dispatch)
      (cond ((and (has-value? lhs) (has-value? rhs))
              (set-value! sum (+ (get-value lhs) (get-value rhs)) dispatch))
            ((and (has-value? lhs) (has-value? sum))
              (set-value! rhs (- (get-value sum) (get-value lhs)) dispatch))
            ((and (has-value? rhs) (has-value? sum))
              (set-value! lhs (- (get-value sum) (get-value rhs)) dispatch))))))

(define multiplier
  (binary-constraint
    (位 (lhs rhs product dispatch)
      (let ((lhs-ok (has-value? lhs))
            (rhs-ok (has-value? rhs))
            (product-ok (has-value? product)))
        (cond ((or (and lhs-ok (= (get-value lhs) 0))
                   (and rhs-ok (= (get-value rhs) 0)))
                (set-value! product 0 dispatch))
              ((and lhs-ok rhs-ok)
                (set-value! product (* (get-value lhs) (get-value rhs)) dispatch))
              ((and lhs-ok product-ok)
                (set-value! rhs (/ (get-value product) (get-value lhs)) dispatch))
              ((and rhs-ok product-ok)
                (set-value! lhs (/ (get-value product) (get-value rhs)) dispatch)))))))

(define (constant value connector)
  (define (dispatch request)
    (error 'constant "unknown request: ~a" request))
  (connect connector dispatch)
  (set-value! connector value dispatch)
  dispatch)

(define (probe name connector)
  (define (print-probe value)
    (printf "Probe: ~a = ~a\n" name value))
  (define (process-new-value) (print-probe (get-value connector)))
  (define (forget-value) (print-probe "?"))
  (define (dispatch request)
    (case request
      ((value-get) (process-new-value))
      ((value-lost) (forget-value))
      (else (error 'probe "unknown request: ~a" request))))
  (connect connector dispatch)
  dispatch)

(define (cfc c f)
  (let ((u (make-connector))
        (v (make-connector))
        (w (make-connector))
        (x (make-connector))
        (y (make-connector)))
    (multiplier c w u)
    (multiplier v x u)
    (adder v y f)
    (constant 9 w)
    (constant 5 x)
    (constant 32 y)
    'ok))

(define (averager a b c)
  (let ((d (make-connector))
        (e (make-connector)))
    (adder a b d)
    (multiplier c e d)
    (constant 2 e)
    'ok))

(define a (make-connector))
(define b (make-connector))
(define c (make-connector))
